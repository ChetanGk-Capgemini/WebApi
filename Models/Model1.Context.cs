//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApiDemo.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HospitalDBEntities1 : DbContext
    {
        public HospitalDBEntities1()
            : base("name=HospitalDBEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Bill_Data> Bill_Data { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Doctor> Doctors { get; set; }
        public virtual DbSet<Inpatient> Inpatients { get; set; }
        public virtual DbSet<Lab_Information> Lab_Information { get; set; }
        public virtual DbSet<Lab_Patient> Lab_Patient { get; set; }
        public virtual DbSet<Outpatient> Outpatients { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<Room_Data> Room_Data { get; set; }
        public virtual DbSet<Room_Info> Room_Info { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int usp_AddBill(Nullable<int> bill_No, Nullable<int> pid, Nullable<System.DateTime> bill_Date, string patient_Type, Nullable<int> doctor_Id, Nullable<decimal> doctor_Fees, Nullable<decimal> room_Charge, Nullable<decimal> operation_Charges, Nullable<decimal> medicine_Fees, Nullable<short> total_Days, Nullable<decimal> lab_Fees, Nullable<decimal> total_Amount, string billing_Status)
        {
            var bill_NoParameter = bill_No.HasValue ?
                new ObjectParameter("Bill_No", bill_No) :
                new ObjectParameter("Bill_No", typeof(int));
    
            var pidParameter = pid.HasValue ?
                new ObjectParameter("Pid", pid) :
                new ObjectParameter("Pid", typeof(int));
    
            var bill_DateParameter = bill_Date.HasValue ?
                new ObjectParameter("Bill_Date", bill_Date) :
                new ObjectParameter("Bill_Date", typeof(System.DateTime));
    
            var patient_TypeParameter = patient_Type != null ?
                new ObjectParameter("Patient_Type", patient_Type) :
                new ObjectParameter("Patient_Type", typeof(string));
    
            var doctor_IdParameter = doctor_Id.HasValue ?
                new ObjectParameter("Doctor_Id", doctor_Id) :
                new ObjectParameter("Doctor_Id", typeof(int));
    
            var doctor_FeesParameter = doctor_Fees.HasValue ?
                new ObjectParameter("Doctor_Fees", doctor_Fees) :
                new ObjectParameter("Doctor_Fees", typeof(decimal));
    
            var room_ChargeParameter = room_Charge.HasValue ?
                new ObjectParameter("Room_Charge", room_Charge) :
                new ObjectParameter("Room_Charge", typeof(decimal));
    
            var operation_ChargesParameter = operation_Charges.HasValue ?
                new ObjectParameter("Operation_Charges", operation_Charges) :
                new ObjectParameter("Operation_Charges", typeof(decimal));
    
            var medicine_FeesParameter = medicine_Fees.HasValue ?
                new ObjectParameter("Medicine_Fees", medicine_Fees) :
                new ObjectParameter("Medicine_Fees", typeof(decimal));
    
            var total_DaysParameter = total_Days.HasValue ?
                new ObjectParameter("Total_Days", total_Days) :
                new ObjectParameter("Total_Days", typeof(short));
    
            var lab_FeesParameter = lab_Fees.HasValue ?
                new ObjectParameter("Lab_Fees", lab_Fees) :
                new ObjectParameter("Lab_Fees", typeof(decimal));
    
            var total_AmountParameter = total_Amount.HasValue ?
                new ObjectParameter("Total_Amount", total_Amount) :
                new ObjectParameter("Total_Amount", typeof(decimal));
    
            var billing_StatusParameter = billing_Status != null ?
                new ObjectParameter("Billing_Status", billing_Status) :
                new ObjectParameter("Billing_Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddBill", bill_NoParameter, pidParameter, bill_DateParameter, patient_TypeParameter, doctor_IdParameter, doctor_FeesParameter, room_ChargeParameter, operation_ChargesParameter, medicine_FeesParameter, total_DaysParameter, lab_FeesParameter, total_AmountParameter, billing_StatusParameter);
        }
    
        public virtual int Usp_AddDoctor(string doctorid, string doctorname, Nullable<int> deptid)
        {
            var doctoridParameter = doctorid != null ?
                new ObjectParameter("doctorid", doctorid) :
                new ObjectParameter("doctorid", typeof(string));
    
            var doctornameParameter = doctorname != null ?
                new ObjectParameter("doctorname", doctorname) :
                new ObjectParameter("doctorname", typeof(string));
    
            var deptidParameter = deptid.HasValue ?
                new ObjectParameter("deptid", deptid) :
                new ObjectParameter("deptid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_AddDoctor", doctoridParameter, doctornameParameter, deptidParameter);
        }
    
        public virtual int usp_AddInpatient(string pid, Nullable<int> roomno, Nullable<int> doctor_id, Nullable<System.DateTime> admission_date, Nullable<System.DateTime> discharge_date, Nullable<decimal> amountperday)
        {
            var pidParameter = pid != null ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(string));
    
            var roomnoParameter = roomno.HasValue ?
                new ObjectParameter("roomno", roomno) :
                new ObjectParameter("roomno", typeof(int));
    
            var doctor_idParameter = doctor_id.HasValue ?
                new ObjectParameter("doctor_id", doctor_id) :
                new ObjectParameter("doctor_id", typeof(int));
    
            var admission_dateParameter = admission_date.HasValue ?
                new ObjectParameter("admission_date", admission_date) :
                new ObjectParameter("admission_date", typeof(System.DateTime));
    
            var discharge_dateParameter = discharge_date.HasValue ?
                new ObjectParameter("discharge_date", discharge_date) :
                new ObjectParameter("discharge_date", typeof(System.DateTime));
    
            var amountperdayParameter = amountperday.HasValue ?
                new ObjectParameter("amountperday", amountperday) :
                new ObjectParameter("amountperday", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddInpatient", pidParameter, roomnoParameter, doctor_idParameter, admission_dateParameter, discharge_dateParameter, amountperdayParameter);
        }
    
        public virtual int Usp_AddOutpatient(string pid, Nullable<System.DateTime> treatment_date, Nullable<int> doctor_id)
        {
            var pidParameter = pid != null ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(string));
    
            var treatment_dateParameter = treatment_date.HasValue ?
                new ObjectParameter("treatment_date", treatment_date) :
                new ObjectParameter("treatment_date", typeof(System.DateTime));
    
            var doctor_idParameter = doctor_id.HasValue ?
                new ObjectParameter("doctor_id", doctor_id) :
                new ObjectParameter("doctor_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_AddOutpatient", pidParameter, treatment_dateParameter, doctor_idParameter);
        }
    
        public virtual int Usp_AddPatient(Nullable<int> patientid, string name, Nullable<short> age, Nullable<short> weight, string gender, string address, Nullable<long> phonenumber, string disease)
        {
            var patientidParameter = patientid.HasValue ?
                new ObjectParameter("patientid", patientid) :
                new ObjectParameter("patientid", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("age", age) :
                new ObjectParameter("age", typeof(short));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("weight", weight) :
                new ObjectParameter("weight", typeof(short));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phonenumberParameter = phonenumber.HasValue ?
                new ObjectParameter("phonenumber", phonenumber) :
                new ObjectParameter("phonenumber", typeof(long));
    
            var diseaseParameter = disease != null ?
                new ObjectParameter("disease", disease) :
                new ObjectParameter("disease", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_AddPatient", patientidParameter, nameParameter, ageParameter, weightParameter, genderParameter, addressParameter, phonenumberParameter, diseaseParameter);
        }
    
        public virtual int usp_DeleteBill(Nullable<int> bill_No)
        {
            var bill_NoParameter = bill_No.HasValue ?
                new ObjectParameter("Bill_No", bill_No) :
                new ObjectParameter("Bill_No", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteBill", bill_NoParameter);
        }
    
        public virtual int Usp_DeleteDoctor(Nullable<int> doctorid)
        {
            var doctoridParameter = doctorid.HasValue ?
                new ObjectParameter("doctorid", doctorid) :
                new ObjectParameter("doctorid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_DeleteDoctor", doctoridParameter);
        }
    
        public virtual int Usp_DeleteInpatient(Nullable<int> pid, Nullable<System.DateTime> admission_date)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            var admission_dateParameter = admission_date.HasValue ?
                new ObjectParameter("admission_date", admission_date) :
                new ObjectParameter("admission_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_DeleteInpatient", pidParameter, admission_dateParameter);
        }
    
        public virtual int usp_DeleteLabDetails(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteLabDetails", idParameter);
        }
    
        public virtual int usp_DeleteLabTestDetails(Nullable<int> lab_Id)
        {
            var lab_IdParameter = lab_Id.HasValue ?
                new ObjectParameter("Lab_Id", lab_Id) :
                new ObjectParameter("Lab_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteLabTestDetails", lab_IdParameter);
        }
    
        public virtual int Usp_DeleteOutpatient(Nullable<int> pid, Nullable<System.DateTime> treatment_date)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            var treatment_dateParameter = treatment_date.HasValue ?
                new ObjectParameter("treatment_date", treatment_date) :
                new ObjectParameter("treatment_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_DeleteOutpatient", pidParameter, treatment_dateParameter);
        }
    
        public virtual int usp_DeletePaidPatient(Nullable<int> pid)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("Pid", pid) :
                new ObjectParameter("Pid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeletePaidPatient", pidParameter);
        }
    
        public virtual int Usp_DeletePatient(Nullable<int> patientid)
        {
            var patientidParameter = patientid.HasValue ?
                new ObjectParameter("patientid", patientid) :
                new ObjectParameter("patientid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_DeletePatient", patientidParameter);
        }
    
        public virtual int Usp_DeleteRoom_Info(Nullable<int> pid, Nullable<System.DateTime> admission_date)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            var admission_dateParameter = admission_date.HasValue ?
                new ObjectParameter("admission_date", admission_date) :
                new ObjectParameter("admission_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_DeleteRoom_Info", pidParameter, admission_dateParameter);
        }
    
        public virtual int Usp_DeleteRoomData(Nullable<int> roomno)
        {
            var roomnoParameter = roomno.HasValue ?
                new ObjectParameter("roomno", roomno) :
                new ObjectParameter("roomno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_DeleteRoomData", roomnoParameter);
        }
    
        public virtual int usp_DeletetDep(Nullable<int> dId)
        {
            var dIdParameter = dId.HasValue ?
                new ObjectParameter("DId", dId) :
                new ObjectParameter("DId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeletetDep", dIdParameter);
        }
    
        public virtual ObjectResult<Usp_GetAllBills_Result> Usp_GetAllBills()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetAllBills_Result>("Usp_GetAllBills");
        }
    
        public virtual ObjectResult<usp_GetAllDep_Result> usp_GetAllDep()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllDep_Result>("usp_GetAllDep");
        }
    
        public virtual ObjectResult<Usp_GetAllDoctor_Result> Usp_GetAllDoctor()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetAllDoctor_Result>("Usp_GetAllDoctor");
        }
    
        public virtual ObjectResult<Usp_GetAllInpatient_Result> Usp_GetAllInpatient()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetAllInpatient_Result>("Usp_GetAllInpatient");
        }
    
        public virtual ObjectResult<usp_GetAllLabDetails_Result> usp_GetAllLabDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllLabDetails_Result>("usp_GetAllLabDetails");
        }
    
        public virtual ObjectResult<Usp_GetAllOutpatient_Result> Usp_GetAllOutpatient()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetAllOutpatient_Result>("Usp_GetAllOutpatient");
        }
    
        public virtual ObjectResult<Usp_GetAllPatient_Result> Usp_GetAllPatient()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetAllPatient_Result>("Usp_GetAllPatient");
        }
    
        public virtual ObjectResult<Usp_GetAllRooms_Result> Usp_GetAllRooms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetAllRooms_Result>("Usp_GetAllRooms");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_GetAllUnallocatedRooms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetAllUnallocatedRooms");
        }
    
        public virtual ObjectResult<usp_GetAvailablePatients_Result> usp_GetAvailablePatients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAvailablePatients_Result>("usp_GetAvailablePatients");
        }
    
        public virtual ObjectResult<usp_GetLabTestDetails_Result> usp_GetLabTestDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetLabTestDetails_Result>("usp_GetLabTestDetails");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_GetMaxBillNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetMaxBillNo");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_GetMaxDepId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetMaxDepId");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_GetMaxDoctorId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetMaxDoctorId");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_GetMaxLabId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetMaxLabId");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_GetMaxPatientId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetMaxPatientId");
        }
    
        public virtual ObjectResult<usp_GetUnallocatedPatients_Result> usp_GetUnallocatedPatients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUnallocatedPatients_Result>("usp_GetUnallocatedPatients");
        }
    
        public virtual int usp_GetUnpaidPtientBillNo(Nullable<int> pid)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("Pid", pid) :
                new ObjectParameter("Pid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetUnpaidPtientBillNo", pidParameter);
        }
    
        public virtual int usp_InsertDep(Nullable<int> dId, string dName)
        {
            var dIdParameter = dId.HasValue ?
                new ObjectParameter("DId", dId) :
                new ObjectParameter("DId", typeof(int));
    
            var dNameParameter = dName != null ?
                new ObjectParameter("DName", dName) :
                new ObjectParameter("DName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertDep", dIdParameter, dNameParameter);
        }
    
        public virtual int usp_InsertLab(Nullable<int> lab_Id, string labTesstName, Nullable<decimal> price)
        {
            var lab_IdParameter = lab_Id.HasValue ?
                new ObjectParameter("Lab_Id", lab_Id) :
                new ObjectParameter("Lab_Id", typeof(int));
    
            var labTesstNameParameter = labTesstName != null ?
                new ObjectParameter("LabTesstName", labTesstName) :
                new ObjectParameter("LabTesstName", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertLab", lab_IdParameter, labTesstNameParameter, priceParameter);
        }
    
        public virtual int usp_InsertLabTestDetails(Nullable<int> lab_Id, Nullable<int> pId, Nullable<int> doctor_Id, Nullable<System.DateTime> test_Date, Nullable<decimal> price, string billing_Status, Nullable<int> test_Id)
        {
            var lab_IdParameter = lab_Id.HasValue ?
                new ObjectParameter("Lab_Id", lab_Id) :
                new ObjectParameter("Lab_Id", typeof(int));
    
            var pIdParameter = pId.HasValue ?
                new ObjectParameter("PId", pId) :
                new ObjectParameter("PId", typeof(int));
    
            var doctor_IdParameter = doctor_Id.HasValue ?
                new ObjectParameter("Doctor_Id", doctor_Id) :
                new ObjectParameter("Doctor_Id", typeof(int));
    
            var test_DateParameter = test_Date.HasValue ?
                new ObjectParameter("Test_Date", test_Date) :
                new ObjectParameter("Test_Date", typeof(System.DateTime));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var billing_StatusParameter = billing_Status != null ?
                new ObjectParameter("Billing_Status", billing_Status) :
                new ObjectParameter("Billing_Status", typeof(string));
    
            var test_IdParameter = test_Id.HasValue ?
                new ObjectParameter("Test_Id", test_Id) :
                new ObjectParameter("Test_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertLabTestDetails", lab_IdParameter, pIdParameter, doctor_IdParameter, test_DateParameter, priceParameter, billing_StatusParameter, test_IdParameter);
        }
    
        public virtual int usp_InsertMaxBill_No(Nullable<int> pid, Nullable<System.DateTime> bill_Date, Nullable<int> d_Id, Nullable<decimal> p)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("Pid", pid) :
                new ObjectParameter("Pid", typeof(int));
    
            var bill_DateParameter = bill_Date.HasValue ?
                new ObjectParameter("Bill_Date", bill_Date) :
                new ObjectParameter("Bill_Date", typeof(System.DateTime));
    
            var d_IdParameter = d_Id.HasValue ?
                new ObjectParameter("D_Id", d_Id) :
                new ObjectParameter("D_Id", typeof(int));
    
            var pParameter = p.HasValue ?
                new ObjectParameter("P", p) :
                new ObjectParameter("P", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertMaxBill_No", pidParameter, bill_DateParameter, d_IdParameter, pParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_MaxLab_PatientTestId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_MaxLab_PatientTestId");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_MaxLabTestId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_MaxLabTestId");
        }
    
        public virtual int Usp_RoomData(Nullable<int> roomno, string roomspecification, Nullable<decimal> price)
        {
            var roomnoParameter = roomno.HasValue ?
                new ObjectParameter("roomno", roomno) :
                new ObjectParameter("roomno", typeof(int));
    
            var roomspecificationParameter = roomspecification != null ?
                new ObjectParameter("roomspecification", roomspecification) :
                new ObjectParameter("roomspecification", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_RoomData", roomnoParameter, roomspecificationParameter, priceParameter);
        }
    
        public virtual ObjectResult<Usp_SearchBilldate_Result> Usp_SearchBilldate(string billdate)
        {
            var billdateParameter = billdate != null ?
                new ObjectParameter("billdate", billdate) :
                new ObjectParameter("billdate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_SearchBilldate_Result>("Usp_SearchBilldate", billdateParameter);
        }
    
        public virtual ObjectResult<Usp_SearchBillno_Result> Usp_SearchBillno(Nullable<int> billno)
        {
            var billnoParameter = billno.HasValue ?
                new ObjectParameter("billno", billno) :
                new ObjectParameter("billno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_SearchBillno_Result>("Usp_SearchBillno", billnoParameter);
        }
    
        public virtual ObjectResult<Usp_SearchDoctor_Result> Usp_SearchDoctor(Nullable<int> doctorid)
        {
            var doctoridParameter = doctorid.HasValue ?
                new ObjectParameter("doctorid", doctorid) :
                new ObjectParameter("doctorid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_SearchDoctor_Result>("Usp_SearchDoctor", doctoridParameter);
        }
    
        public virtual ObjectResult<Usp_SearchInpatient_Result> Usp_SearchInpatient(Nullable<int> pid, Nullable<System.DateTime> admission_date)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            var admission_dateParameter = admission_date.HasValue ?
                new ObjectParameter("admission_date", admission_date) :
                new ObjectParameter("admission_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_SearchInpatient_Result>("Usp_SearchInpatient", pidParameter, admission_dateParameter);
        }
    
        public virtual ObjectResult<Usp_SearchOutpatient_Result> Usp_SearchOutpatient(Nullable<int> pid, Nullable<System.DateTime> treatment_date)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            var treatment_dateParameter = treatment_date.HasValue ?
                new ObjectParameter("treatment_date", treatment_date) :
                new ObjectParameter("treatment_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_SearchOutpatient_Result>("Usp_SearchOutpatient", pidParameter, treatment_dateParameter);
        }
    
        public virtual ObjectResult<Usp_SearchPatient_Result> Usp_SearchPatient(Nullable<int> patientid)
        {
            var patientidParameter = patientid.HasValue ?
                new ObjectParameter("patientid", patientid) :
                new ObjectParameter("patientid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_SearchPatient_Result>("Usp_SearchPatient", patientidParameter);
        }
    
        public virtual ObjectResult<Usp_SearchRoom_Result> Usp_SearchRoom(Nullable<int> roomno)
        {
            var roomnoParameter = roomno.HasValue ?
                new ObjectParameter("roomno", roomno) :
                new ObjectParameter("roomno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_SearchRoom_Result>("Usp_SearchRoom", roomnoParameter);
        }
    
        public virtual int usp_UpdateBill(Nullable<int> bill_No, Nullable<int> pid, Nullable<System.DateTime> bill_Date, string patient_Type, string doctor_Id, Nullable<decimal> doctor_Fees, Nullable<decimal> room_Charge, Nullable<decimal> operation_Charges, Nullable<decimal> medicine_Fees, Nullable<short> total_Days, Nullable<decimal> lab_Fees, Nullable<decimal> total_Amount, string billing_Status)
        {
            var bill_NoParameter = bill_No.HasValue ?
                new ObjectParameter("Bill_No", bill_No) :
                new ObjectParameter("Bill_No", typeof(int));
    
            var pidParameter = pid.HasValue ?
                new ObjectParameter("Pid", pid) :
                new ObjectParameter("Pid", typeof(int));
    
            var bill_DateParameter = bill_Date.HasValue ?
                new ObjectParameter("Bill_Date", bill_Date) :
                new ObjectParameter("Bill_Date", typeof(System.DateTime));
    
            var patient_TypeParameter = patient_Type != null ?
                new ObjectParameter("Patient_Type", patient_Type) :
                new ObjectParameter("Patient_Type", typeof(string));
    
            var doctor_IdParameter = doctor_Id != null ?
                new ObjectParameter("Doctor_Id", doctor_Id) :
                new ObjectParameter("Doctor_Id", typeof(string));
    
            var doctor_FeesParameter = doctor_Fees.HasValue ?
                new ObjectParameter("Doctor_Fees", doctor_Fees) :
                new ObjectParameter("Doctor_Fees", typeof(decimal));
    
            var room_ChargeParameter = room_Charge.HasValue ?
                new ObjectParameter("Room_Charge", room_Charge) :
                new ObjectParameter("Room_Charge", typeof(decimal));
    
            var operation_ChargesParameter = operation_Charges.HasValue ?
                new ObjectParameter("Operation_Charges", operation_Charges) :
                new ObjectParameter("Operation_Charges", typeof(decimal));
    
            var medicine_FeesParameter = medicine_Fees.HasValue ?
                new ObjectParameter("Medicine_Fees", medicine_Fees) :
                new ObjectParameter("Medicine_Fees", typeof(decimal));
    
            var total_DaysParameter = total_Days.HasValue ?
                new ObjectParameter("Total_Days", total_Days) :
                new ObjectParameter("Total_Days", typeof(short));
    
            var lab_FeesParameter = lab_Fees.HasValue ?
                new ObjectParameter("Lab_Fees", lab_Fees) :
                new ObjectParameter("Lab_Fees", typeof(decimal));
    
            var total_AmountParameter = total_Amount.HasValue ?
                new ObjectParameter("Total_Amount", total_Amount) :
                new ObjectParameter("Total_Amount", typeof(decimal));
    
            var billing_StatusParameter = billing_Status != null ?
                new ObjectParameter("Billing_Status", billing_Status) :
                new ObjectParameter("Billing_Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateBill", bill_NoParameter, pidParameter, bill_DateParameter, patient_TypeParameter, doctor_IdParameter, doctor_FeesParameter, room_ChargeParameter, operation_ChargesParameter, medicine_FeesParameter, total_DaysParameter, lab_FeesParameter, total_AmountParameter, billing_StatusParameter);
        }
    
        public virtual int usp_UpdateBillStatus(Nullable<int> bill_No)
        {
            var bill_NoParameter = bill_No.HasValue ?
                new ObjectParameter("Bill_No", bill_No) :
                new ObjectParameter("Bill_No", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateBillStatus", bill_NoParameter);
        }
    
        public virtual int usp_UpdateDep(Nullable<int> dId, string dName)
        {
            var dIdParameter = dId.HasValue ?
                new ObjectParameter("DId", dId) :
                new ObjectParameter("DId", typeof(int));
    
            var dNameParameter = dName != null ?
                new ObjectParameter("DName", dName) :
                new ObjectParameter("DName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateDep", dIdParameter, dNameParameter);
        }
    
        public virtual int Usp_UpdateDoctor(Nullable<int> doctorid, string doctorname, Nullable<int> deptid)
        {
            var doctoridParameter = doctorid.HasValue ?
                new ObjectParameter("doctorid", doctorid) :
                new ObjectParameter("doctorid", typeof(int));
    
            var doctornameParameter = doctorname != null ?
                new ObjectParameter("doctorname", doctorname) :
                new ObjectParameter("doctorname", typeof(string));
    
            var deptidParameter = deptid.HasValue ?
                new ObjectParameter("deptid", deptid) :
                new ObjectParameter("deptid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_UpdateDoctor", doctoridParameter, doctornameParameter, deptidParameter);
        }
    
        public virtual int Usp_UpdateInpatient(Nullable<int> pid, Nullable<int> roomno, Nullable<int> doctor_id, Nullable<System.DateTime> admission_date, Nullable<System.DateTime> discharge_date, Nullable<decimal> amountperday)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            var roomnoParameter = roomno.HasValue ?
                new ObjectParameter("roomno", roomno) :
                new ObjectParameter("roomno", typeof(int));
    
            var doctor_idParameter = doctor_id.HasValue ?
                new ObjectParameter("doctor_id", doctor_id) :
                new ObjectParameter("doctor_id", typeof(int));
    
            var admission_dateParameter = admission_date.HasValue ?
                new ObjectParameter("admission_date", admission_date) :
                new ObjectParameter("admission_date", typeof(System.DateTime));
    
            var discharge_dateParameter = discharge_date.HasValue ?
                new ObjectParameter("discharge_date", discharge_date) :
                new ObjectParameter("discharge_date", typeof(System.DateTime));
    
            var amountperdayParameter = amountperday.HasValue ?
                new ObjectParameter("amountperday", amountperday) :
                new ObjectParameter("amountperday", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_UpdateInpatient", pidParameter, roomnoParameter, doctor_idParameter, admission_dateParameter, discharge_dateParameter, amountperdayParameter);
        }
    
        public virtual int usp_UpdateLabTestDetails(Nullable<int> lab_Id, Nullable<int> pId, Nullable<int> doctor_Id, Nullable<System.DateTime> test_Date, Nullable<decimal> price, string billing_Status, Nullable<int> test_Id)
        {
            var lab_IdParameter = lab_Id.HasValue ?
                new ObjectParameter("Lab_Id", lab_Id) :
                new ObjectParameter("Lab_Id", typeof(int));
    
            var pIdParameter = pId.HasValue ?
                new ObjectParameter("PId", pId) :
                new ObjectParameter("PId", typeof(int));
    
            var doctor_IdParameter = doctor_Id.HasValue ?
                new ObjectParameter("Doctor_Id", doctor_Id) :
                new ObjectParameter("Doctor_Id", typeof(int));
    
            var test_DateParameter = test_Date.HasValue ?
                new ObjectParameter("Test_Date", test_Date) :
                new ObjectParameter("Test_Date", typeof(System.DateTime));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var billing_StatusParameter = billing_Status != null ?
                new ObjectParameter("Billing_Status", billing_Status) :
                new ObjectParameter("Billing_Status", typeof(string));
    
            var test_IdParameter = test_Id.HasValue ?
                new ObjectParameter("Test_Id", test_Id) :
                new ObjectParameter("Test_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateLabTestDetails", lab_IdParameter, pIdParameter, doctor_IdParameter, test_DateParameter, priceParameter, billing_StatusParameter, test_IdParameter);
        }
    
        public virtual int Usp_UpdateOutpatient(Nullable<int> pid, Nullable<System.DateTime> treatment_date, Nullable<int> doctor_id)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            var treatment_dateParameter = treatment_date.HasValue ?
                new ObjectParameter("treatment_date", treatment_date) :
                new ObjectParameter("treatment_date", typeof(System.DateTime));
    
            var doctor_idParameter = doctor_id.HasValue ?
                new ObjectParameter("doctor_id", doctor_id) :
                new ObjectParameter("doctor_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_UpdateOutpatient", pidParameter, treatment_dateParameter, doctor_idParameter);
        }
    
        public virtual int Usp_UpdatePatient(Nullable<int> patientid, string name, Nullable<short> age, Nullable<short> weight, string gender, string address, Nullable<long> phonenumber, string disease)
        {
            var patientidParameter = patientid.HasValue ?
                new ObjectParameter("patientid", patientid) :
                new ObjectParameter("patientid", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("age", age) :
                new ObjectParameter("age", typeof(short));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("weight", weight) :
                new ObjectParameter("weight", typeof(short));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phonenumberParameter = phonenumber.HasValue ?
                new ObjectParameter("phonenumber", phonenumber) :
                new ObjectParameter("phonenumber", typeof(long));
    
            var diseaseParameter = disease != null ?
                new ObjectParameter("disease", disease) :
                new ObjectParameter("disease", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_UpdatePatient", patientidParameter, nameParameter, ageParameter, weightParameter, genderParameter, addressParameter, phonenumberParameter, diseaseParameter);
        }
    
        public virtual int Usp_UpdateRoomData(Nullable<int> roomno, string roomspecification, Nullable<decimal> price)
        {
            var roomnoParameter = roomno.HasValue ?
                new ObjectParameter("roomno", roomno) :
                new ObjectParameter("roomno", typeof(int));
    
            var roomspecificationParameter = roomspecification != null ?
                new ObjectParameter("roomspecification", roomspecification) :
                new ObjectParameter("roomspecification", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_UpdateRoomData", roomnoParameter, roomspecificationParameter, priceParameter);
        }
    }
}
